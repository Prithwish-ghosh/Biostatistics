options(rstan.useNULL = TRUE) 
library(StanHeaders)
library(rstan)
library(data.table)
library(lubridate)
library(gdata)
library(EnvStats)

library(ggplot2)
library(readr)

countries="Maharashtra"
args = commandArgs(trailingOnly=TRUE)
if(length(args) == 0) {
  args = 'stan_code'
} 
StanModel = args[1]

print(sprintf("Running %s",StanModel))
setwd("~/Downloads/Bio Informatics")
## Reading all data
d=read_csv("Karnataka.csv")
dim(d)

d = data.frame(d)

#summary(d$Daily.Cases)
#is.finite(d$Daily.Deaths)

#d$Daily.Cases= abs(d$Daily.Cases)
#d$Daily.Deaths=abs(d$Daily.Deaths)

covariates=d[,c(4,5,6)]
head(covariates)
#covariates = data.frame(covariates[,c(1:3)])
dim(d)

dim(covariates)
head(covariates)
sum(is.na(covariates$Markets..Shopping.complexes.and.malls))
setwd("~/Downloads") 
serial.interval = read.csv("serial_interval.csv")
head(serial.interval)
dim(serial.interval)
dim(d)
serial.interval = serial.interval[1:426,]
#serial.interval = serial.interval[,c(1, 2)]
#serial.interval = serial.interval[,c(1)]
dim(d)
#serial.interval = serial.interval[1:175,]
head(serial.interval)
dim(serial.interval)
#serial.interval =data.frame(c(serial.interval$X , c(1:16)) ,c(serial.interval$fit , rep(4.440000e-16, 16)))

#head(serial.interval)
#dim(serial.interval)
sum(is.na(serial.interval$fit))
#serial.interval=serial.interval
dim(serial.interval)
head(serial.interval)
##covariates = read.csv('data/interventions_ind.csv', stringsAsFactors = FALSE)
##covariates <- covariates[1, c(1,2,3,4,5)]
p <- ncol(covariates)
forecast = 0

DEBUG = FALSE
if(DEBUG == FALSE) {
  N2 = 426 # Increase this for a further forecast
}  else  {
  ### For faster runs:
  
  N2 = 426
}
dates = list()
dates=d$Collection.Dates

reported_cases = list()
stan_data = list(M=1,N= NULL,
                 p=p,x1=poly(1:N2,2)[,1],
                 x2=poly(1:N2,2)[,2],
                 y=NULL,
                 covariate1=NULL,
                 covariate2=NULL,
                 covariate3=NULL,
                 deaths=NULL,
                 f=NULL,
                 N0=6,
                 cases=NULL,
                 LENGTHSCALE=7
                 ,SI=serial.interval$fit[1:N2]) # N0 = 6 to make it consistent with Rayleigh
deaths_by_country = list()

Country=countries
Country

stan_data

#CFR=cfr.by.country$weighted_fatality[cfr.by.country$country == Country]
CFR=0.009185


# hazard estimation
N = length(d$Daily.Cases) #d
N
#print(sprintf("%s has %d days of data",Country,N))
forecast = 15
N2 = N+15
N2
h = rep(0,forecast+N) # discrete hazard rate from time t = 1, ..., 100
h
length(h)
if(DEBUG) { # OLD -- but faster for testing this part of the code
  mean = 18.8
  cv = 0.45
  
  for(i in 1:length(h))
    h[i] = (CFR*pgammaAlt(i,mean = mean,cv=cv) - CFR*pgammaAlt(i-1,mean = mean,cv=cv)) / (1-CFR*pgammaAlt(i-1,mean = mean,cv=cv))
} else { # NEW
  mean1 = 5.1; cv1 = 0.86; # infection to onset
  mean2 = 18.8; cv2 = 0.45 # onset to death
  ## assume that CFR is probability of dying given infection
  x1 = rgammaAlt(5e6,mean1,cv1) # infection-to-onset ----> do all people who are infected get to onset?
  x2 = rgammaAlt(5e6,mean2,cv2) # onset-to-death
  f = ecdf(x1+x2)
  convolution = function(u) (CFR * f(u))
  
  h[1] = (convolution(1.5) - convolution(0)) 
  for(i in 2:length(h)) {
    h[i] = (convolution(i+.5) - convolution(i-.5)) / (1-convolution(i-.5))
  }
}
s = rep(0,N2)
s[1] = 1 
for(i in 2:N2) {
  s[i] = s[i-1]*(1-h[i-1])
}
f = s * h
f
y=c(as.vector(as.numeric(d$Daily.Cases)),rep(-1,forecast))
#reported_cases[[Country]] = as.vector(as.numeric(d1$cases))
deaths=c(as.vector(as.numeric(d$Daily.Deaths)),rep(-1,forecast))
cases=c(as.vector(as.numeric(d$Daily.Cases)),rep(-1,forecast))
#deaths_by_country[[Country]] = as.vector(as.numeric(d1$deaths))
covariates2 <- as.data.frame(covariates[, colnames(covariates)])
# x=1:(N+forecast)
covariates2[N:(N+forecast),] <- covariates2[N,]


## append data
stan_data$N = c(stan_data$N,N)

stan_data$y = c(stan_data$y,y[1]) # just the index case!
# stan_data$x = cbind(stan_data$x,x)
stan_data$covariate1 = cbind(stan_data$covariate1,covariates2[,1])
stan_data$covariate2 = cbind(stan_data$covariate2,covariates2[,2])
stan_data$covariate3 = cbind(stan_data$covariate3,covariates2[,3])

stan_data$f = cbind(stan_data$f,f)
stan_data$deaths = cbind(stan_data$deaths,deaths)
stan_data$cases = cbind(stan_data$cases,cases)

stan_data$N2=N2
stan_data$x=1:N2
if(length(stan_data$N) == 1) {
  stan_data$N = as.array(stan_data$N)
}



if(DEBUG) {
write.csv(
data.frame(date=dates[[1]],
             `Interstate.Transport`=stan_data$covariate1[1:stan_data$N,1],
             `Intrastate.Transport`=stan_data$covariate2[1:stan_data$N,1],
             `Markets..malls.and.shopping.complexes`=stan_data$covariate3[1:stan_data$N,1]),#,
             #`Presence210`=stan_data$covariate4[1:stan_data$N,1],
             #`Presence23403`=stan_data$covariate5[1:stan_data$N,1]) # ,
 file=sprintf("results/%s-check-dates.csv",countries),row.names=F)
}



stan_data$y = t(stan_data$y)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
#rstan_options(auto_write = T)
m = stan_model(paste0('stan_code.stan'))


if(DEBUG) {
  fit = sampling(m,data=stan_data,iter=40,warmup=20,chains=3)
} else { 
  # fit = sampling(m,data=stan_data,iter=4000,warmup=2000,chains=8,thin=4,control = list(adapt_delta = 0.90, max_treedepth = 10))
  fit = sampling(m,data=stan_data,iter=10000,warmup= 5000,chains=3,thin=4,control = list(adapt_delta = 0.99, max_treedepth = 10))
}  

out1 = rstan::extract(fit) # run upto this line

MH_out_wo_mut = out1


